#optimizer_args.py

import argparse

def get_parser():
    """
    Returns the argument parser for script.py.
    Placed here to make the main script more readable.
    """
    description='Script for performing hyperparameter optimization on a reservoir computer.'
    epilog="""If the reservoir ODE file is a .pkl file, it should be structured as a dictionary mapping 'res_ode' and 'trained_res_ode' to functions.
    If it is a .py file, it should create a dictionary of that structure named res_odes.
    The functions must have the same signatures as the corresponding function in ResComp or DrivenResComp.
    If needed, the function 'initial_condition' can also be replaced in the same manner.
    
    It is also possible to add or remove parameters from optimization if they are (or are not) used in the new reservoir ODE.
    To add optimization parameters, place a list of sherpa.Parameter objects in a list under key 'opt_parameters'.
    To add constant parameters (or override other ResComp functions), place them in a dictionary under key 'parameters'
    To remove optimization parameters, place a list of the parameters' names in a list under key 'remove'."""
    #Set up arguments
    parser = argparse.ArgumentParser(description=description,epilog=epilog)
    #Positional arguments
    parser.add_argument('system', type=str, help='System to use. Must be one of "lorenz", "rossler", "thomas", "softrobot", or a .pkl file containing a rescomp.optimizer.System object, or a .py file defining a rescomp.optimizer.System object under the name "system".')
    parser.add_argument('map_initial', type=str, help='Initial condition mapping. Must be one of "random", "activ_f", "relax"')
    parser.add_argument('prediction_type', type=str, help='Prediction type during optimization. Must be one of "continue", "random"')
    parser.add_argument('method', type=str, help='Training method. Must be one of "standard", "augmented"')
    parser.add_argument('resultsdir', type=str, help='Results directory. Optional; autogenerated if not specified', default=None, nargs='?')
    
    #Parameters
    parser.add_argument('--opt-ntrials', help='Number of hyperparameter configurations to attempt while optimizing', type=int, default=200)
    parser.add_argument('--opt-vpt-reps', help='Number of times to compute the valid prediction time for each set of hyperparameters before averaging', type=int, default=10)
    parser.add_argument('--test-ntrials', help='Number of times to test the optimized reservoir computer', type=int, default=25)
    parser.add_argument('--test-lyap-reps', help='Number of times to repeat the Lyapunov exponent estimate', type=int, default=10)
    parser.add_argument('--saved-orbits', help='Number of orbits to save from the optimized reservoir computer', type=int, default=0)
    
    parser.add_argument('--max-stderr', help='Maximum standard error of sample before optimization will proceed to next hyperparameter set', type=int, default=None)
    
    #Additional options
    parser.add_argument('-o','--ode', type=str, help='.py or .pkl file containing alternate reservoir ODE to use', default=None)
    
    parser.add_argument('--algorithm', type=str, help='sherpa hyperparameter optimization algorithm to use', default='population')
    parser.add_argument('--datadir', type=str, help='Directory to look for prior files in, with name [system]_prior.pkl.', default='')
    parser.add_argument('--debug', help='Run in debug mode', action='store_true')
    parser.add_argument('--use-dashboard', help='Enable the Sherpa dashboard. Not supported on Windows', action='store_true')
    parser.add_argument('-p', '--parallel', help='Uses parallelization via the ipyparallel package', action='store_true')
    parser.add_argument('--profile', help='Specify the ipyparallel profile to be used', default=None)
    parser.add_argument('--no-timestamp', help='Do not include a timestamp in file and folder names', action='store_true')
    
    return parser